# server
## 服务端口
server.port = 8080

## Data base
### Host
#spring.datasource.url                                   = jdbc:mysql://192.168.206.23:13307/sharding_db?characterEncoding=UTF-8&useSSL=true
### 用户名
#spring.datasource.username                              = root
### 密码
#spring.datasource.password                              = root
#
## JPA
### 是否在控制台打印sql
#spring.jpa.show-sql                                     = true
### 数据库类型
#spring.jpa.database                                     = MYSQL
### jpa自动建表策略
#spring.jpa.hibernate.ddl-auto                           = validate
### 设置数据库引擎为 InnoDB
#spring.jpa.database-platform                            = org.hibernate.dialect.MySQL55Dialect
### JDBC 最小连接数
##spring.datasource.hikari.minimum-idle                  = 50
### JDBC 最大连接数
##spring.datasource.hikari.maximum-pool-size             = 120
### 驱动类
spring.jpa.hibernate.ddl-auto=none

# Sharding-jdbc
## 所有数据节点
spring.shardingsphere.datasource.names=ds0,ds1
# ds0 配置
spring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://192.168.206.23:30006/ds0
spring.shardingsphere.datasource.ds0.username=root
spring.shardingsphere.datasource.ds0.password=123456
# ds1 配置
spring.shardingsphere.datasource.ds1.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds1.jdbc-url=jdbc:mysql://192.168.206.23:30006/ds1
spring.shardingsphere.datasource.ds1.username=root
spring.shardingsphere.datasource.ds1.password=123456
# 分库策略 根据 user_id 取模确定数据进哪个数据库
spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=user_id
spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression=ds$->{user_id % 2}
# t_order 具体分表策略
spring.shardingsphere.sharding.tables.t_order.actual-data-nodes=ds$->{0..1}.t_order_$->{0..1}
spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.sharding-column=order_id
spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.algorithm-expression=t_order_$->{order_id % 2}
# t_order_item 具体分表策略
spring.shardingsphere.sharding.tables.t_order_item.actual-data-nodes=ds$->{0..1}.t_order_item_$->{0..1}
spring.shardingsphere.sharding.tables.t_order_item.table-strategy.inline.sharding-column=order_id
spring.shardingsphere.sharding.tables.t_order_item.table-strategy.inline.algorithm-expression=t_order_item_$->{order_id % 2}
## 使用 SNOWFLAKE 算法生成主键
spring.shardingsphere.sharding.tables.t_order.key-generator.column = id
spring.shardingsphere.sharding.tables.t_order.key-generator.type = SNOWFLAKE
spring.shardingsphere.props.sql.show = true

# 日志
## 格式化日志
logging.pattern.console=%clr(%d{${LOG_DATEFORMAT_PATTERN:yyyy-MM-dd HH:mm:ss.SSS}}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %clr([%X{requestId}]){yellow} %m%n${LOG_EXCEPTION_CONVERSION_WORD:%wEx}

